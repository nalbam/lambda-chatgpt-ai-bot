name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main
  repository_dispatch:
    types:
      - deploy

env:
  AWS_REGION: "us-east-1"
  AWS_ROLE_NAME: "lambda-chatgpt-ai-bot"

  STAGE: "dev"

  BOT_CURSOR: ${{ vars.BOT_CURSOR }}
  IMAGE_MODEL: ${{ vars.IMAGE_MODEL }}
  OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
  SYSTEM_MESSAGE: ${{ vars.SYSTEM_MESSAGE }}

  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
  SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
  SLACK_SIGNING_SECRET: ${{ secrets.SLACK_SIGNING_SECRET }}

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python 3.12 🐍
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: npm install

      - name: Install plugin - python requirements
        run: npx serverless plugin install --name serverless-python-requirements

      - name: Install plugin - dotenv plugin
        run: npx serverless plugin install --name serverless-dotenv-plugin

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Set up environment variables 📝
        run: |
          echo "STAGE=${STAGE}" >> .env
          echo "BOT_CURSOR=${BOT_CURSOR}" >> .env
          echo "IMAGE_MODEL=${IMAGE_MODEL}" >> .env
          echo "OPENAI_API_KEY=${OPENAI_API_KEY}" >> .env
          echo "OPENAI_MODEL=${OPENAI_MODEL}" >> .env
          echo "OPENAI_ORG_ID=${OPENAI_ORG_ID}" >> .env
          echo "SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}" >> .env
          echo "SLACK_SIGNING_SECRET=${SLACK_SIGNING_SECRET}" >> .env
          echo "SYSTEM_MESSAGE=${SYSTEM_MESSAGE}" >> .env

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: "arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_NAME }}"
          role-session-name: github-actions-ci-bot
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS Lambda 🚀
        run: npx serverless deploy --stage ${{ env.STAGE }} --region ${{ env.AWS_REGION }}
